1. 前端（Frontend）
定义
前端是用户直接看到并与之交互的部分。
它主要负责界面展示和用户交互。

典型技术
HTML（页面结构）
CSS（样式、美化）
JavaScript/TypeScript（交互逻辑）
框架和库：React, Angular, Vue, Svelte...
例子

你打开一个网站看到的按钮、文字、图片。
点击一个按钮后显示弹窗。
页面上的动画、输入框、下拉菜单。
打个比方
前端就像是餐馆里客人看到的 菜单、桌椅、装修、服务员的动作。

2. 后端（Backend）
定义
后端是运行在服务器上的逻辑部分。
它负责数据处理、业务流程、权限管理和和数据库交互。

典型技术
编程语言：Golang、Java、Python、Node.js、C#…
Web 框架：Spring Boot、Django、Express、Gin…
数据库：MySQL、PostgreSQL、MongoDB、Redis…
API：通常通过 REST API 或 GraphQL 提供服务。
例子

你在网页上登录账号，后端会验证用户名和密码。
购物网站结算时计算价格并存储订单。
社交网站发布一条动态并保存到数据库。
打个比方
后端就像餐馆 厨房：你点单后，厨房根据菜单做出菜品（数据/结果），最后交给服务员（前端）送到你面前。

3. 前端 vs 后端
对比点	前端 (Frontend)	后端 (Backend)
面向对象	用户（User）	系统和数据（Server, Database）
技术栈	HTML, CSS, JS, React, Angular, Vue…	Golang, Java, Python, Node.js, SQL…
职责	展示页面、交互体验	处理逻辑、存取数据、验证权限
执行位置	浏览器 (Client)	服务器 (Server)
工作比喻	餐厅大厅 + 服务员	餐厅厨房 + 厨师

4. 全栈（Full Stack）
如果一个人既能做前端也能做后端，我们常叫他 全栈工程师。
例如用 Angular 写页面 + 用 Golang 写 API 接口 + 用 MySQL 存储数据。

✅ 一句话总结：

前端是用户能看到并操作的部分（页面和交互）。
后端是隐藏在服务器上的逻辑和数据处理部分。
两者通过 接口(API) 通信，协同工作，才能完成一个完整的应用。

------------------------------------------------------------------------------------------

┌───────────────┐
│   前端 (Frontend) 
│  浏览器界面/APP
│  - HTML/CSS/JS
│  - Angular/React/Vue
└───────▲───────┘
        │ 用户操作 (点击/提交表单/请求数据)
        │
        ▼
┌───────────────┐
│   API 接口层 (REST/GraphQL) 
│   - URL: /login, /getUsers
│   - JSON 数据通信
└───────▲───────┘
        │ 请求(Request) / 响应(Response)
        │
        ▼
┌───────────────┐
│   后端 (Backend)
│   - Golang / Java / Python
│   - 业务逻辑处理
│   - 权限验证、安全控制
└───────▲───────┘
        │ 查询/写入数据
        │
        ▼
┌───────────────┐
│   数据库 (Database)
│   - MySQL / PostgreSQL
│   - MongoDB / Redis
│   - 存储用户、订单、日志
└───────────────┘


用户在 前端 点击或提交（比如登录）。
前端通过 API 把数据发送给 后端。
后端 验证逻辑，可能需要向 数据库 查询或写入数据。
后端 处理好结果，通过 API 返回给 前端。
前端更新界面，把结果展示给用户。


